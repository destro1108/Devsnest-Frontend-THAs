{"version":3,"sources":["components/MemeCard.js","components/MemeContainer.js","components/GenerateMeme.js","App.js","index.js"],"names":["MemeCard","memeData","handleClick","onClick","className","style","backgroundImage","url","MemeContainer","memeTemplates","generateMeme","map","_","inx","GenerateMeme","chooseTemplate","updateMemeData","useState","template_id","id","username","password","boxes","formData","setFormData","console","log","height","width","Fragment","Array","box_count","onChange","e","newBoxes","text","target","value","type","placeholder","name","forEach","el","fetch","then","res","json","data","App","memes","setMemes","genMeme","setGenMeme","useEffect","displayGenerateMeme","newData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d240e62.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst MemeCard = ({memeData, handleClick}) => {\r\n    return (\r\n        <div onClick={() => handleClick(memeData)} className=\"meme-card\">\r\n                <div style={{backgroundImage:`url(${memeData.url})`}} className=\"image\">\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemeCard\r\n","import React from 'react'\r\nimport MemeCard from './MemeCard';\r\n\r\n\r\n\r\nconst MemeContainer = ({memeTemplates, generateMeme}) => {\r\n    \r\n    return (\r\n        <div className=\"meme-container\">\r\n            {memeTemplates !== null ? memeTemplates.map((_, inx) => \r\n                <MemeCard handleClick={generateMeme} key={inx} memeData={memeTemplates[inx]} />\r\n            ) : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemeContainer\r\n","import React, { useState } from 'react'\r\n\r\nconst GenerateMeme = ({memeData, chooseTemplate, updateMemeData}) => {\r\n    const [formData, setFormData] = useState({template_id:memeData.id, username:\"destro1108\", password:\"Xyro123456\", boxes:[]});\r\n    console.log(memeData);\r\n    const generateMeme = () => {\r\n        let url = `https://api.imgflip.com/caption_image?template_id=${formData.template_id}&username=${formData.username}&password=${formData.password}`\r\n        formData.boxes.forEach((el, inx) => {\r\n            url += `&boxes[${inx}][text]=${el.text}`\r\n        })\r\n        fetch(url).then(res => res.json())\r\n        .then(data => {\r\n            console.log(data);\r\n            updateMemeData({...memeData, url:data.data.url})\r\n        })\r\n    }\r\n\r\n    let aspectRatio = memeData.width / memeData.height;\r\n    let width = 400;\r\n    let height = 400 * aspectRatio;\r\n\r\n    return (\r\n        <div className=\"gen-meme-wrapper\">\r\n            {memeData && \r\n                <React.Fragment>\r\n                <div style={{backgroundImage:`url(${memeData.url})`,width, height}} className=\"gen-image\"> </div>\r\n                <div className=\"meme-inputs\">\r\n                    {[...Array(memeData.box_count)].map((_, inx) => {\r\n                    return (<div className=\"meme-input-div\"> <input \r\n                    onChange={(e) => {\r\n                        const newBoxes = formData.boxes;\r\n                        newBoxes[inx] = {text:e.target.value}\r\n                        setFormData({...formData, boxes:newBoxes})\r\n                    }} \r\n                    key={inx} type=\"text\" className=\"meme-input\" placeholder={`Meme Caption ${inx+1}`} name={`Caption${inx+1}`} id={`Caption${inx+1}`} /> </div>)\r\n                    })}\r\n                </div>\r\n                <div className=\"meme-actions\">\r\n                    <div onClick={() => {generateMeme(formData)}} className=\"button\">Generate Meme</div>\r\n                    <div onClick={() => {chooseTemplate()}} className=\"button\">Choose Template</div>\r\n                </div>    \r\n                </React.Fragment>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GenerateMeme\r\n","\nimport MemeContainer from \"./components/MemeContainer\";\nimport GenerateMeme from './components/GenerateMeme';\nimport { useEffect, useState } from \"react\";\n\nconst MEME_URL = \"https://api.imgflip.com/get_memes\";\n\nconst App = () => {\n  const [memes, setMemes] = useState(null);\n  const [genMeme, setGenMeme] = useState(null);\n  useEffect(() =>{\n      fetch(MEME_URL).then(data => data.json())\n      .then(data=> {\n          setMemes(data.data.memes);\n      })\n  }, [])\n\n  const displayGenerateMeme = memeData => {\n      setGenMeme(memeData)\n  }\n\n  const updateMemeData = newData => {\n    setGenMeme(newData);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Meme Generator!</h2>\n      </header>\n      <div className=\"content\">\n        {memes && !genMeme ? <MemeContainer memeTemplates={memes} generateMeme={displayGenerateMeme} /> :\n          (genMeme && <GenerateMeme chooseTemplate={()=>displayGenerateMeme(null)} updateMemeData={updateMemeData} memeData={genMeme} />)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}