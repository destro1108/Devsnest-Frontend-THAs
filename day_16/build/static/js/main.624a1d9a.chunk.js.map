{"version":3,"sources":["imgs/Meme.jpg","components/MemeCard.js","components/ChessBoard.js","App.js","reportWebVitals.js","index.js"],"names":["MemeCard","className","src","Meme","alt","BlackCell","WhiteCell","ChessBoard","rows","i","j","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4IAAe,G,KAAA,IAA0B,kC,OCkB1BA,EAhBE,WACb,OACI,sBAAKC,UAAU,oBAAf,UACI,qBAAKA,UAAU,aAAf,SACI,qBAAKC,IAAKC,EAAMC,IAAI,eAExB,oBAAIH,UAAU,YAAd,uBAGA,qBAAKA,UAAU,eAAf,2CCTNI,EAAY,WACd,OACI,qBAAKJ,UAAU,gBAIjBK,EAAY,WACd,OACI,qBAAKL,UAAU,gBAsBRM,EAlBI,WAGf,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAI,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAClBF,EAAKG,KAAKD,EAAE,IAAM,EAAKD,EAAE,IAAM,EAAI,cAAC,EAAD,IAAe,cAAC,EAAD,IAAkBA,EAAE,IAAM,EAAI,cAAC,EAAD,IAAe,cAAC,EAAD,KAGvG,OACI,sBAAKR,UAAU,sBAAf,UACI,qBAAKA,UAAU,cAAf,SACKO,IAEL,oBAAIP,UAAU,YAAd,6BCdGW,EATH,WACV,OACE,sBAAKX,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.624a1d9a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Meme.77ed39bd.jpg\";","import Meme from '../imgs/Meme.jpg';\r\n\r\nconst MemeCard = () => {\r\n    return(\r\n        <div className=\"meme-card-wrapper\">\r\n            <div className=\"meme-image\">\r\n                <img src={Meme} alt=\"Meme.jpg\" />\r\n            </div>\r\n            <h2 className=\"div-title\">\r\n                Dank Meme   \r\n            </h2>\r\n            <div className=\"div-subtitle\">\r\n                This is a very dank meme.\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemeCard;","\r\n\r\nconst BlackCell = () => {\r\n    return(\r\n        <div className=\"black cell\"></div>\r\n    )\r\n}\r\n\r\nconst WhiteCell = () => {\r\n    return(\r\n        <div className=\"white cell\"></div>\r\n    )\r\n}\r\n\r\nconst ChessBoard = () => {\r\n\r\n    let rows = [];\r\n    for (let i = 0; i < 8; i++){\r\n        for(let j = 0; j < 8; j++){\r\n            rows.push(j%2 === 1 ? (i%2 === 0 ? <BlackCell/> : <WhiteCell/>) : ((i%2 === 0 ? <WhiteCell/> : <BlackCell/>)));\r\n        }\r\n    }\r\n    return(\r\n        <div className=\"chess-board-wrapper\">\r\n            <div className=\"chess-board\">\r\n                {rows}\r\n            </div>\r\n            <h2 className=\"div-title\">Chess Board</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChessBoard;","import './style.css';\nimport MemeCard from './components/MemeCard';\nimport ChessBoard from './components/ChessBoard';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <MemeCard/>\n      <ChessBoard/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './style.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}